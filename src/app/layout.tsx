import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // Disable Grammarly and other browser extensions
              if (typeof window !== 'undefined') {
                window.addEventListener('DOMContentLoaded', function() {
                  // Remove Grammarly attributes that can cause hydration mismatches
                  const observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                      if (mutation.type === 'attributes') {
                        const target = mutation.target;
                        if (target.hasAttribute && target.hasAttribute('data-new-gr-c-s-check-loaded')) {
                          target.removeAttribute('data-new-gr-c-s-check-loaded');
                        }
                        if (target.hasAttribute && target.hasAttribute('data-gr-ext-installed')) {
                          target.removeAttribute('data-gr-ext-installed');
                        }
                      }
                    });
                  });
                  observer.observe(document.body, { 
                    attributes: true, 
                    attributeFilter: ['data-new-gr-c-s-check-loaded', 'data-gr-ext-installed'],
                    subtree: true 
                  });
                });
              }
            `,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning={true}
      >
        {children}
      </body>
    </html>
  );
}
